const { randomUUID } = require("crypto");
const express = require("express");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");
const router = express.Router();


function leseDatenbank() {  
    try {
        console.log("erfolgreich gelessen")
        let datenbank = JSON.parse(fs.readFileSync("./db.json"));
        return datenbank;
    } catch (error) {
        console.error("Datenbank konnte nicht gelesen werden", error);
        return [];
    }
}

function schreibeDatenbank(daten) {
    let neueJsonDaten = JSON.stringify(daten, null, 2);
    fs.writeFileSync("./db.json", neueJsonDaten);
}

function existiertID(id, reklamationen){
    return reklamationen.some((r) => r.id === id);
}

function istNameGueltig(name){
    return /^[A-Za-zäöüÖÜß\s]+$/.test(name);
}

function istEmailGueltig(email){
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

function istDatumGueltig(datum){
    let datumGueltig = /^\d{4}-\d{2}-\d{2}$/.test(datum);
    if (!datumGueltig)
        return false;

    let [jahr, monat, tag] = datum.split("-").map(Number);

    if(jahr < 2024)
        return false;

    if(monat < 1 || monat > 12)
        return false;

    if(tag < 1 || tag > 31)
        return false;

    return true;
}

function istBeschreibungGueltig(beschreibung){
    return beschreibung && beschreibung.trim().length > 0;
}

function sortiereReklamationenProduktId(reklamationen, reihenfolge) {
    return reklamationen.sort((a, b) => {
        if (reihenfolge === "aufsteigend") {
            return a.produktId - b.produktId; // Aufsteigend sortieren
        } else if (reihenfolge === "absteigend") {
            return b.produktId - a.produktId; // Absteigend sortieren
        } else {
            throw new Error("Ungültige Sortierreihenfolge. Verwende 'aufsteigend' oder 'absteigend'.");
        }
    });
}

function istReklamationGueltig(reklamation, res, aktion = "post"){
    const { produktId, kunde, datum, beschreibung } = reklamation;

    if(aktion === "post") {
        if(!kunde || !kunde.name || !kunde.email || !datum || !beschreibung){
            return res.status(400).json({ fehler: "Bitte alle Pflichtfelder eingeben" });
        }
    }
    if(kunde.name){
        if(!istNameGueltig(kunde.name)){
            return res.status(400).json({ fehler: "Name muss aus Buchstaben bestehen und keine Sonderzeichen enthalten" });
        }
    }
    
    if(kunde.email){
        if(!istEmailGueltig(kunde.email)){
            return res.status(400).json({ fehler: "E-Mail muss eine gültige Adresse enthalten" });
        }
    
    }
    if(datum){
        if(!istDatumGueltig(datum)){
            return res.status(400).json({ fehler: "Datum muss im Format yyyy.mm.dd sein" });
        }
    }
   
    if(beschreibung){
        if(!istBeschreibungGueltig(beschreibung)){
            return res.status(400).json({ fehler: "Beschreibung muss aus einer oder mehreren Wörtern bestehen" });
        }
    }
    

}

// 1. Reklamation erstellen
router.post("/", (req, res) => {
    const reklamationen = leseDatenbank();
    let reklamation = req.body;
    istReklamationGueltig(reklamation, res, "post");
    let neueid;
    do{
        neueid = randomUUID();
    }while(existiertID(neueid, reklamationen))
  const neueReklamation = {
    id: neueid,
    ...reklamation,
    status: "Open" 
  };

  reklamationen.push(neueReklamation);
  schreibeDatenbank(reklamationen);

  res.status(201).json(neueReklamation);
});

// 2. Alle Reklamationen anzeigen
router.get("/", (req, res) => {
  const reklamationen = leseDatenbank();
  res.json(reklamationen);
});

router.get("/pidAuf", (req, res) => {
    const reklamationen = leseDatenbank();
    let sortiereReklamationen = sortiereReklamationenProduktId(reklamationen, "aufsteigend");
    res.json(sortiereReklamationen);
});

router.get("/pidAb", (req, res) => {
    const reklamationen = leseDatenbank();
    let sortiereReklamationen = sortiereReklamationenProduktId(reklamationen, "absteigend");
    res.json(sortiereReklamationen);
});

router.get("/:id", (req, res) => {
  const reklamationen = leseDatenbank();
  const reklamation = reklamationen.find((r) => r.id === req.params.id);

  if (!reklamation) {
    return res.status(404).json({ fehler: "Reklamation nicht gefunden" });
  }

  res.json(reklamation);
});

router.get("/datum/:datum", (req, res) => {
    const reklamationen = leseDatenbank(); // Datenbank lesen
    let reklamationenNachDatum = [];

    for (let rek in reklamationen) {
        if (reklamationen[rek].datum === req.params.datum) {
            reklamationenNachDatum.push(reklamationen[rek]);
        }
    }

    if (reklamationenNachDatum.length === 0) {
        return res.status(404).json({ fehler: "Reklamationen mit dem angegebenen Datum nicht gefunden" });
    }

    res.json(reklamationenNachDatum);
});


router.get("/produkt/:produktId", (req, res) => {
    const reklamationen = leseDatenbank();
    let reklamationenNachProduktID = [];
    for(let rek in reklamationen) {
        if(reklamationen[rek].produktId == req.params.produktId)
            reklamationenNachProduktID.push(reklamationen[rek])
    }
    
    if (reklamationenNachProduktID.length == 0) {
      return res.status(404).json({ fehler: "Reklamationen mit der angegebenen Produkt-ID nicht gefunden" });
    }
  
    res.json(reklamationenNachProduktID);
});
  
router.get("/name/:name", (req, res) => {
    const reklamationen = leseDatenbank();
    let reklamationenNachNamen = [];
    for(let rek in reklamationen) {
        if(reklamationen[rek].kunde.name.toLowerCase() === req.params.name.toLowerCase())
            reklamationenNachNamen.push(reklamationen[rek])
    }
    
  
    if (reklamationenNachNamen.length == 0) {
      return res.status(404).json({ fehler: "Reklamationen mit dem angegebenen Namen nicht gefunden" });
    }
  
    res.json(reklamationenNachNamen);
});
  
router.get("/status/:status", (req, res) => {
    const reklamationen = leseDatenbank(); // Datenbank lesen
    const erlaubteStatus = ["Open", "InProgress", "Rejected", "Accepted", "Canceled"];

    const status = req.params.status;

    if (!erlaubteStatus.includes(status)) {
        return res.status(400).json({ fehler: "Ungültiger Status. Erlaubte Status sind: Open, InProgress, Rejected, Accepted, Canceled." });
    }

    const reklamationenNachStatus = reklamationen.filter((r) => r.status === status);

    if (reklamationenNachStatus.length === 0) {
        return res.status(404).json({ fehler: `Keine Reklamationen mit dem Status '${status}' gefunden.` });
    }

    res.json(reklamationenNachStatus);
});


// 4. Reklamation aktualisieren
router.put("/:id", (req, res) => {
  const reklamationen = leseDatenbank();
  var index = reklamationen.findIndex((r) => r.id === req.params.id);

  if (index === -1) {
    return res.status(404).json({ fehler: "Reklamation nicht gefunden" });
  }

  if(!(reklamationen[index].status != "Open") && !(reklamationen[index].status != "InProgress")) {
    return res.status(400).json({ fehler: "Reklamation kann nicht mehr geändert werden" });
  }
  let reklamation = req.body;
  istReklamationGueltig(reklamation, res, "put");

  reklamationen[index] = { ...reklamationen[index], ...req.body };
  schreibeDatenbank(reklamationen);

  res.json(reklamationen[index]);
});

// 5. Reklamation löschen (Status auf Storniert setzen)
router.delete("/:id", (req, res) => {
  const reklamationen = leseDatenbank();
  const index = reklamationen.findIndex((r) => r.id === req.params.id);

  if (index === -1) {
    return res.status(404).json({ fehler: "Reklamation nicht gefunden" });
  }
  if(reklamationen[index].status === "Canceled"){
    return res.status(404).json({ fehler: "Reklamation wurde schon gelöscht" });
  }
  reklamationen[index].status = "Canceled";
  schreibeDatenbank(reklamationen);

  res.json({ nachricht: "Reklamation wurde gelöscht", reklamation: reklamationen[index] });
});

router.delete("/produkt/:produktId", (req, res) => {
    const reklamationen = leseDatenbank(); // Datenbank lesen
    const produktId = parseInt(req.params.produktId); 
  
    const gefilterteReklamationen = reklamationen.filter(
      (r) => r.produktId === produktId && r.status !== "Canceled"
    );
  
    if (gefilterteReklamationen.length === 0) {
      return res.status(404).json({
        fehler: "Keine Reklamationen mit der angegebenen Produkt-ID gefunden oder bereits storniert.",
      });
    }
  
    for (let reklamation of reklamationen) {
      if (reklamation.produktId === produktId && reklamation.status !== "Canceled") {
        reklamation.status = "Canceled";
      }
    }
  
    schreibeDatenbank(reklamationen); 
    res.json({
      nachricht: `Reklamationen mit der Produkt-ID ${produktId} wurden gelöscht.`,
      reklamationen: gefilterteReklamationen,
    });
});

router.delete("/datum/:datum", (req, res) => {
    const reklamationen = leseDatenbank(); // Datenbank lesen
    const datum = req.params.datum; 

    const gefilterteReklamationen = reklamationen.filter(
        (r) => r.datum === datum && r.status !== "Canceled"
    );

    if (gefilterteReklamationen.length === 0) {
        return res.status(404).json({
            fehler: "Keine Reklamationen mit dem angegebenen Datum gefunden oder bereits storniert."
        });
    }

    for (let reklamation of reklamationen) {
        if (reklamation.datum === datum && reklamation.status !== "Canceled") {
            reklamation.status = "Canceled";
        }
    }

    schreibeDatenbank(reklamationen); 

    res.json({
        nachricht: `Reklamationen mit dem Datum ${datum} wurden gelöscht.`,
        reklamationen: gefilterteReklamationen
    });
});


router.delete("/name/:name", (req, res) => {
    const reklamationen = leseDatenbank(); // Datenbank lesen
    const name = req.params.name.toLowerCase(); 

    const gefilterteReklamationen = reklamationen.filter(
        (r) => r.kunde.name.toLowerCase() === name && r.status !== "Canceled"
    );

    if (gefilterteReklamationen.length === 0) {
        return res.status(404).json({
            fehler: "Keine Reklamationen mit dem angegebenen Namen gefunden oder bereits storniert."
        });
    }

    for (let reklamation of reklamationen) {
        if (reklamation.kunde.name.toLowerCase() === name && reklamation.status !== "Canceled") {
            reklamation.status = "Canceled";
        }
    }

    schreibeDatenbank(reklamationen); 

    res.json({
        nachricht: `Reklamationen des Kunden '${req.params.name}' wurden gelöscht.`,
        reklamationen: gefilterteReklamationen
    });
});


module.exports = router;
